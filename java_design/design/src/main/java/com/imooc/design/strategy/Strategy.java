package com.imooc.design.strategy;

/**
 * 策略模式
 * 在类中增加一个私有域,引用另一个已有的类的实例,通过调用引用实例的方法从而获得新的功能. 这种设计被称为 组合(复合)
 *  多用组合,少用继承
 *  
 *  策略模式的缺点:
 *    1.客户代码需要了解每个策略实现的细节
 *    2.增加了对象的数目
 *   
 *  策略模式的使用场景;
 *    1.许多相关的类仅仅是行为差异
 *    2.运行时选取不同的算法变体 
 *    3.通过条件在多个分支中选取一个
 */
public class Strategy {

}
